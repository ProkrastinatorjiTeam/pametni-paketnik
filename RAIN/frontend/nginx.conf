server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html index.htm;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Add this section to proxy API requests
    location /api/ {
        # If your backend is also Dockerized and running in a container named 'backend-service' on port 3000,
        # and both frontend and backend containers are on the same Docker network:
        proxy_pass http://suspicious_solomon:3000/;

        # If your backend is running on your host machine (and you're using Docker Desktop for Windows/Mac):
        # proxy_pass http://host.docker.internal:3000/;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;

        # You might need to adjust the path if your backend API routes are not at the root.
        # For example, if your backend expects /model3D/list and not /api/model3D/list,
        # you might need a rewrite or adjust proxy_pass:
        # Example: proxy_pass http://backend-service:3000/; (removes /api prefix)
        # Or, ensure your backend routes are structured to handle the /api prefix if you use:
        # proxy_pass http://backend-service:3000/api/;
        # For simplicity, the example above assumes your backend expects requests at its root
        # (e.g., backend-service:3000/model3D/list) and Nginx forwards /api/model3D/list to it.
        # If your backend routes are like /model3D/list, then proxy_pass http://backend-service:3000/;
        # and your frontend calls /api/model3D/list. Nginx will strip /api/ if you use a trailing slash
        # on proxy_pass and no path, or you can use rewrite rules.
        # A common setup is:
        # proxy_pass http://backend-service:3000/;
        # This means a request to /api/foo becomes a request to /foo on the backend.
        # If your backend expects /api/foo, then use:
        # proxy_pass http://backend-service:3000/api/;
        # Given your current backend routes (e.g. /model3D/list), the first option is more likely:
        # proxy_pass http://backend-service:3000/;
        # And your frontend will call /api/model3D/list.
        # To make it map /api/model3D/list to /model3D/list on the backend:
        rewrite /api/(.*) /$1 break;
        proxy_pass http://suspicious_solomon:3000; 
    }
}